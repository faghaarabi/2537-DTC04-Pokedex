<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dashboard</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      margin: 0;
      padding: 0;
      color: #333;
    }

    .navbar {
      background-color: #29582b;
      padding: 15px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 1000;
    }

    .navbar-title {
      font-size: 24px;
      color: white;
      font-weight: bold;
      text-decoration: none;
    }

    .logout {
      background-color: #f44336;
      color: white;
      padding: 8px 16px;
      text-decoration: none;
      border-radius: 4px;
      font-weight: bold;
      border: none;
      cursor: pointer;
    }

    .logout:hover {
      background-color: #d32f2f;
    }

    main {
      padding: 20px;
    }

    h1, h2, h3 {
      color: #2c3e50;
    }

    ul {
      padding-left: 0;
    }

    li {
      padding: 10px;
      margin: 5px 0;
      background-color: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 4px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    button {
      padding: 8px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-left: 10px;
    }

    button:hover {
      background-color: #a3c9a5;
    }

    .pokemon-container {
      width: auto;
      background-color: #f0f8f5;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
    }

    #pokemon-section ul {
      list-style-type: none;
      padding: 0;
    }

    #pokemon-section ul li {
      margin-bottom: 10px;
    }

    #pokemon-section ul li button {
      width: 25%;
      min-width: 120px;
      display: block;
      margin: 0 auto;

    
    }
  </style>
</head>

<body>
  <div class="navbar">
    <a href="/home" class="navbar-title">My Dashboard</a>
    <a href="/logout" class="logout">Logout</a>
  </div>

  <main>
    <h1>Dashboard</h1>
    <p>This is your protected dashboard page. Only authenticated users can see this content.</p>
    <p>You are currently logged in as <strong><%= username %></strong>.</p>

    <div class="pokemon-container">
      <div id="pokemon-section">
        <h2>Add a Pokémon to Favorites:</h2>
      </div>
    </div>

    <h2>Favorites List</h2>
    <ul id="favorites-list"></ul>

    <h2>Timeline</h2>
    <ul id="timeline-list"></ul>
  </main>

  <script>
    let currentFavorites = [];

    const fetchFavorites = () =>
      fetch("/favorites", { method: "GET" })
        .then(response => response.json())
        .then(data => {
          currentFavorites = data.map(fav => fav.name.toLowerCase());
          const favoritesList = document.getElementById("favorites-list");
          favoritesList.innerHTML = "";
          data.forEach(favorite => {
            const li = document.createElement("li");

            const nameDiv = document.createElement("div");
            nameDiv.textContent = favorite.name;

            const deleteButton = document.createElement("button");
            deleteButton.textContent = "Delete";
            deleteButton.onclick = () => deleteFavorite(favorite._id);

            li.appendChild(nameDiv);
            li.appendChild(deleteButton);
            favoritesList.appendChild(li);
          });

          renderPokemonButtons(); // only after favorites are loaded
        })
        .catch(error => console.error("Error fetching favorites:", error));

    const deleteFavorite = (id) => {
      if (confirm("Are you sure you want to delete this favorite?")) {
        fetch(`/deleteFavorite/${id}`, {
          method: "DELETE"
        })
        .then(response => response.json())
        .then(result => {
          if (result.success) {
            fetchFavorites();
            fetchTimeline();
          } else {
            alert("Failed to delete favorite.");
          }
        })
        .catch(error => {
          console.error("Error deleting favorite:", error);
          alert("An error occurred while deleting the favorite.");
        });
      }
    };

    const fetchTimeline = () =>
      fetch("/timeline", { method: "GET" })
        .then(response => response.json())
        .then(data => {
          const timelineList = document.getElementById("timeline-list");
          timelineList.innerHTML = "";

          data.forEach(event => {
            const li = document.createElement("li");
            li.innerHTML = `
              <div style="flex: 1;">
                <strong>${event.title}</strong>: ${event.description}
                <br><small>${new Date(event.date).toLocaleString()}</small>
              </div>
            `;
            const deleteButton = document.createElement("button");
            deleteButton.textContent = "Delete";
            deleteButton.onclick = () => deleteTimeline(event._id);

            li.appendChild(deleteButton);
            timelineList.prepend(li);
          });
        })
        .catch(error => console.error("Error fetching timeline:", error));

    const deleteTimeline = (id) => {
      if (confirm("Are you sure you want to delete this entry?")) {
        fetch(`/deleteTimeline/${id}`, { method: "DELETE" })
          .then(response => response.json())
          .then(result => {
            if (result.success) {
              fetchTimeline();
            } else {
              alert("Failed to delete entry.");
            }
          })
          .catch(error => {
            console.error("Error deleting entry:", error);
            alert("An error occurred while deleting the entry.");
          });
      }
    };

    const renderPokemonButtons = () => {
      const pokemonSection = document.getElementById("pokemon-section");
      pokemonSection.innerHTML = "<h2>Add a Pokémon to Favorites:</h2>";

      fetch("https://pokeapi.co/api/v2/pokemon?limit=10")
        .then(response => response.json())
        .then(data => {
          const pokemonList = document.createElement("ul");

          data.results.forEach(pokemon => {
            const li = document.createElement("li");

            const button = document.createElement("button");
            button.textContent = pokemon.name;

            if (currentFavorites.includes(pokemon.name.toLowerCase())) {
              button.disabled = true;
              button.style.backgroundColor = "#ccc";
              button.style.cursor = "not-allowed";
            }

            button.addEventListener("click", () => {
              const pokemonName = pokemon.name.toLowerCase();

              if (currentFavorites.includes(pokemonName)) {
                alert(`${pokemon.name} is already in your favorites!`);
                button.disabled = true;
                button.style.backgroundColor = "#ccc";
                button.style.cursor = "not-allowed";
                return;
              }

              fetch(`/addFavorite/${pokemonName}`, { method: "GET" })
                .then(response => {
                  if (response.ok) {
                    alert(`${pokemon.name} added to your favorites!`);
                    currentFavorites.push(pokemonName);
                    button.disabled = true;
                    button.style.backgroundColor = "#ccc";
                    button.style.cursor = "not-allowed";
                    fetchFavorites();
                    fetchTimeline();
                  } else {
                    alert(`Failed to add ${pokemon.name} to favorites.`);
                  }
                })
                .catch(error => console.error("Error adding favorite:", error));
            });

            li.appendChild(button);
            pokemonList.appendChild(li);
          });

          pokemonSection.appendChild(pokemonList);
        })
        .catch(error => console.error("Error fetching Pokémon:", error));
    };

    fetchFavorites(); // will trigger Pokémon rendering after done
    fetchTimeline();
  </script>
</body>
</html>
