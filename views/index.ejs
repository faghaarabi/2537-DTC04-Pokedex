<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 20px;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }

        .welcome {
            font-size: 1.2em;
        }

        .logout {
            background-color: #f44336;
            color: white;
            padding: 8px 16px;
            text-decoration: none;
            border-radius: 4px;
            font-weight: bold;
        }

        .logout:hover {
            background-color: #d32f2f;
        }

        h1, h2, h3 {
            color: #2c3e50;
        }

        ul {
            padding-left: 20px;
        }

        li {
            padding: 10px;
            margin: 5px 0;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        input[type="text"] {
            padding: 8px;
            width: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        button {
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
        }

        button:hover {
            background-color: #45a049;
        }
    </style>
</head>

<body>
    <div class="header">
        <div class="welcome">Welcome, <%= username %>!</div>
        <a href="/logout" class="logout">Logout</a>
    </div>

    <h1>Dashboard</h1>
    <p>This is your protected dashboard page. Only authenticated users can see this content.</p>
    <p>You are currently logged in as <strong><%= username %></strong>.</p>

    <!-- Pokémon Section (Top) -->
    <div id="pokemon-section">
        <h2>Add a Pokémon to Favorites:</h2>
    </div>

    <!-- Favorites Section (Middle) -->
    <h2>Favorites List</h2>
    <ul id="favorites-list"></ul>

    <!-- Timeline Section (Bottom) -->
    <h2>Timeline</h2>
    <ul id="timeline-list"></ul>

    <script>
        const fetchFavorites = () =>
            fetch("/favorites", { method: "GET" })
                .then(response => response.json())
                .then(data => {
                    const favoritesList = document.getElementById("favorites-list");
                    favoritesList.innerHTML = "";
                    data.forEach(favorite => {
                        const li = document.createElement("li");
                        li.textContent = favorite.name;
                        favoritesList.appendChild(li);
                    });
                })
                .catch(error => console.error("Error fetching favorites:", error));

        const fetchTimeline = () =>
            fetch("/timeline", { method: "GET" })
                .then(response => response.json())
                .then(data => {
                    const timelineList = document.getElementById("timeline-list");
                    timelineList.innerHTML = "";

                    data.forEach(event => {
                        const li = document.createElement("li");
                        li.innerHTML = `
                            <div style="flex: 1;">
                                <strong>${event.title}</strong>: ${event.description}
                                <br><small>${new Date(event.date).toLocaleString()}</small>
                            </div>
                        `;
                        const deleteButton = document.createElement("button");
                        deleteButton.textContent = "Delete";
                        deleteButton.onclick = () => deleteTimeline(event._id);

                        li.appendChild(deleteButton);
                        timelineList.appendChild(li);
                    });
                })
                .catch(error => console.error("Error fetching timeline:", error));

        const deleteTimeline = (id) => {
            if (confirm("Are you sure you want to delete this entry?")) {
                fetch(`/deleteTimeline/${id}`, { method: "POST" })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            fetchTimeline();
                        } else {
                            alert("Failed to delete entry.");
                        }
                    })
                    .catch(error => {
                        console.error("Error deleting entry:", error);
                        alert("An error occurred while deleting the entry.");
                    });
            }
        };

        // Load Pokémon list (at top)
        fetch("https://pokeapi.co/api/v2/pokemon?limit=10")
            .then(response => response.json())
            .then(data => {
                const pokemonSection = document.getElementById("pokemon-section");

                data.results.forEach(pokemon => {
                    const button = document.createElement("button");
                    button.textContent = pokemon.name;
                    button.style.margin = "5px";
                    button.addEventListener("click", () => {
                        const pokemonName = pokemon.name;
                        fetch(`/addFavorite/${pokemonName}`, { method: "GET" })
                            .then(response => {
                                if (response.ok) {
                                    alert(`${pokemonName} added to favorites!`);
                                    fetchFavorites();
                                    fetchTimeline();
                                } else {
                                    alert(`Failed to add ${pokemonName} to favorites.`);
                                }
                            })
                            .catch(error => console.error("Error adding favorite:", error));
                    });
                    pokemonSection.appendChild(button);
                });
            })
            .catch(error => console.error("Error fetching Pokémon:", error));

        fetchFavorites();
        fetchTimeline();
    </script>
</body>
</html>
