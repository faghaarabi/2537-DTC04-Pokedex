<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dashboard</title>
  <style>
  
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f7f9;
    color: #333;
  }
  .navbar {
    background-color: #29582b;
    padding: 15px 25px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: sticky;
    top: 0;
    z-index: 1000;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
  }
  .navbar-title {
    font-size: 24px;
    color: white;
    font-weight: 600;
    text-decoration: none;
  }
  .logout {
    background-color: #f44336;
    color: white;
    padding: 10px 18px;
    text-decoration: none;
    border-radius: 6px;
    font-weight: bold;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
  }
  .logout:hover {
    background-color: #c62828;
  }
  main {
    padding: 30px 20px;
    max-width: 1000px;
    margin: auto;
  }
  h1, h2 {
    color: #2c3e50;
    font-weight: 600;
  }
  ul {
    padding-left: 0;
  }
  li {
    padding: 12px;
    margin: 8px 0;
    background-color: #ffffff;
    border: 1px solid #ddd;
    border-radius: 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  button {
    padding: 8px 12px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    margin-left: 10px;
    transition: background-color 0.2s ease-in-out;
  }
  button:hover {
    background-color: #45a049;
  }
  input, select {
    padding: 8px 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 14px;
    margin-right: 10px;
  }
  .pokemon-container {
    background-color: #e7f4ec;
    padding: 25px;
    border-radius: 10px;
    margin-bottom: 25px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  }
  #pokemon-section ul {
    list-style-type: none;
    padding: 0;
  }
  #pokemon-section ul li {
    margin-bottom: 15px;
    text-align: center;
    background-color: #fff;
    border-radius: 8px;
    padding: 12px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  #pokemon-section ul li img {
    display: block;
    margin: 0 auto 10px;
  }
  #controls {
    margin-bottom: 20px;
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  #controls input, #controls select {
    flex-grow: 1;
    min-width: 120px;
  }
  #favorites-list li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    background: #fff;
    margin-bottom: 10px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
</style>

  </style>
</head>
<body>
  <div class="navbar">
    <a href="/home" class="navbar-title">My Dashboard</a>
    <a href="/logout" class="logout">Logout</a>
  </div>

  <main>
    <h1>Dashboard</h1>
    <p>You are logged in as <strong><%= username %></strong>.</p>

    <% if (role === "admin") { %>
      <h2>Admin Page</h2>
      <p>Here is a list of all users:</p>
      <ul id="user-list"></ul>
    <% } else if (role === "user") { %>
      <div class="pokemon-container">
        <h2>Pokémon List</h2>
        <div id="controls">
          <input type="text" id="searchInput" placeholder="Search Pokémon..." />
          <select id="typeFilter">
            <option value="">All Types</option>
            <option value="grass">Grass</option>
            <option value="fire">Fire</option>
            <option value="water">Water</option>
            <option value="electric">Electric</option>
            <option value="normal">Normal</option>
            <option value="fighting">Fighting</option>
            <option value="psychic">Psychic</option>
            <option value="rock">Rock</option>
            <option value="ground">Ground</option>
            <option value="ghost">Ghost</option>
            <option value="dragon">Dragon</option>
            <option value="dark">Dark</option>
            <option value="fairy">Fairy</option>
          </select>
          <select id="sortSelect">
            <option value="az">Sort by Name: A–Z</option>
            <option value="za">Sort by Name: Z–A</option>
            <option value="type">Sort by Type</option>
          </select>
          <button id="prevPage">Previous</button>
          <button id="nextPage">Next</button>
        </div>
        <div id="pokemon-section"></div>
      </div>

      <h2>Favorites List</h2>
      <ul id="favorites-list"></ul>

      <h2>Timeline</h2>
      <ul id="timeline-list"></ul>
    <% } %>
  </main>

  <script>
    const role = "<%= role %>";
    if (role === "admin") {
      fetch("/users")
        .then(res => res.json())
        .then(users => {
          const list = document.getElementById("user-list");
          list.innerHTML = "";
          users.forEach(user => {
            const li = document.createElement("li");

            const usernameInput = document.createElement("input");
            usernameInput.value = user.username;

            const roleSelect = document.createElement("select");
            ["user", "admin"].forEach(opt => {
              const option = document.createElement("option");
              option.value = opt;
              option.textContent = opt;
              if (user.role === opt) option.selected = true;
              roleSelect.appendChild(option);
            });

            const editButton = document.createElement("button");
            editButton.textContent = "Edit";
            editButton.onclick = () => {
              fetch(`/editUser/${user._id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  username: usernameInput.value,
                  role: roleSelect.value
                })
              })
              .then(res => res.json())
              .then(result => {
                if (result.success) {
                  alert("User updated!");
                } else {
                  alert("Update failed");
                }
              });
            };

            const deleteButton = document.createElement("button");
            deleteButton.textContent = "Delete";
            deleteButton.onclick = () => {
              fetch(`/deleteUser/${user._id}`, { method: "DELETE" })
                .then(res => res.json())
                .then(result => {
                  if (result.success) li.remove();
                });
            };

            li.appendChild(usernameInput);
            li.appendChild(roleSelect);
            li.appendChild(editButton);
            li.appendChild(deleteButton);
            list.appendChild(li);
          });
        });
    }

    if (role === "user") {
      let currentFavorites = [];
      let offset = 0;

      const renderFavorites = (favorites) => {
        const list = document.getElementById("favorites-list");
        list.innerHTML = "";
        favorites.forEach(fav => {
          const li = document.createElement("li");
          li.textContent = fav.name;
          const delBtn = document.createElement("button");
          delBtn.textContent = "Remove";
          delBtn.onclick = () => {
            fetch(`/deleteFavorite/${fav._id}`, { method: "DELETE" })
              .then(res => res.json())
              .then(result => {
                if (result.success) {
                  fetchFavorites();
                  fetchTimeline();
                }
              });
          };
          li.appendChild(delBtn);
          list.appendChild(li);
        });
      };

      const fetchFavorites = () =>
        fetch("/favorites")
          .then(res => res.json())
          .then(data => {
            currentFavorites = data.map(f => f.name.toLowerCase());
            renderFavorites(data);
            renderPokemonList();
          });

      const renderPokemonList = () => {
        const section = document.getElementById("pokemon-section");
        section.innerHTML = "";
        fetch(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${offset}`)
          .then(res => res.json())
          .then(data => {
            Promise.all(data.results.map(p => fetch(p.url).then(res => res.json())))
              .then(fullDetails => {
                let filtered = fullDetails;

                const searchValue = document.getElementById("searchInput").value.toLowerCase();
                if (searchValue) {
                  filtered = filtered.filter(p => p.name.toLowerCase().includes(searchValue));
                }

                const selectedType = document.getElementById("typeFilter").value;
                if (selectedType) {
                  filtered = filtered.filter(p => p.types.some(t => t.type.name === selectedType));
                }

                const sortOption = document.getElementById("sortSelect").value;
                if (sortOption === "az") {
                  filtered.sort((a, b) => a.name.localeCompare(b.name));
                } else if (sortOption === "za") {
                  filtered.sort((a, b) => b.name.localeCompare(a.name));
                } else if (sortOption === "type") {
                  filtered.sort((a, b) =>
                    (a.types[0]?.type.name || "").localeCompare(b.types[0]?.type.name || "")
                  );
                }

                const ul = document.createElement("ul");
                filtered.forEach(p => {
                  const li = document.createElement("li");
                  const img = document.createElement("img");
                  img.src = p.sprites.front_default;
                  img.alt = p.name;
                  img.width = 96;

                  const nameText = document.createElement("div");
                  nameText.textContent = `${p.name} (${p.types.map(t => t.type.name).join(", ")})`;

                  const btn = document.createElement("button");
                  btn.textContent = `Add ${p.name}`;
                  if (currentFavorites.includes(p.name.toLowerCase())) {
                    btn.disabled = true;
                    btn.style.backgroundColor = "#ccc";
                    btn.style.cursor = "not-allowed";
                  }

                  btn.onclick = () => {
                    fetch('/addFavorite', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ name: p.name })
                    }).then(res => {
                      if (res.ok) {
                        btn.disabled = true;
                        btn.style.backgroundColor = "#ccc";
                        btn.style.cursor = "not-allowed";
                        fetchFavorites();
                        fetchTimeline();
                      }
                    });
                  };

                  li.appendChild(img);
                  li.appendChild(nameText);
                  li.appendChild(btn);
                  ul.appendChild(li);
                });

                section.appendChild(ul);
              });
          });
      };

      document.getElementById("prevPage").onclick = () => {
        if (offset >= 20) {
          offset -= 20;
          renderPokemonList();
        }
      };

      document.getElementById("nextPage").onclick = () => {
        offset += 20;
        renderPokemonList();
      };

      document.getElementById("typeFilter").addEventListener("change", renderPokemonList);
      document.getElementById("sortSelect").addEventListener("change", renderPokemonList);
      document.getElementById("searchInput").addEventListener("input", renderPokemonList);

      const fetchTimeline = () =>
        fetch("/timeline")
          .then(res => res.json())
          .then(data => {
            const timelineList = document.getElementById("timeline-list");
            timelineList.innerHTML = "";
            data.forEach(event => {
              const li = document.createElement("li");
              li.innerHTML = `<div style='flex:1'><strong>${event.title}</strong>: ${event.description}<br><small>${new Date(event.date).toLocaleString()}</small></div>`;
              const deleteButton = document.createElement("button");
              deleteButton.textContent = "Delete";
              deleteButton.onclick = () => {
                fetch(`/deleteTimeline/${event._id}`, { method: "DELETE" })
                  .then(res => res.json())
                  .then(result => {
                    if (result.success) fetchTimeline();
                  });
              };
              li.appendChild(deleteButton);
              timelineList.appendChild(li);
            });
          });

      fetchFavorites();
      fetchTimeline();
    }
  </script>
</body>
</html>
